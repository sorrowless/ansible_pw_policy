---
- name: Pwsec | Override default data with user one
  set_fact:
    pwsec: "{{ pwsec_common | combine(pwsec_group, pwsec_host, recursive=True) }}"
  tags:
    - always

- name: Include preliminary checks
  import_tasks: prechecks.yml

- name: Install needed security packages
  become: yes
  package:
    name: "{{ pwsec.packages }}"
    state: present

- name: Ensure maximum number of days a password may be used
  become: yes
  lineinfile:
    path: /etc/login.defs
    state: present
    regexp: '^PASS_MAX_DAYS.*'
    line: 'PASS_MAX_DAYS {{ pwsec.pass_max_days }}'
    mode: 0644
    owner: root
    group: root

- name: Ensure number of days warning given before a password expires
  become: yes
  lineinfile:
    path: /etc/login.defs
    state: present
    regexp: '^PASS_WARN_AGE.*'
    line: 'PASS_WARN_AGE {{ pwsec.pass_warn_age }}'
    mode: 0644
    owner: root
    group: root

- name: Ensure number of days allowed between password changes
  become: yes
  lineinfile:
    path: /etc/login.defs
    state: present
    regexp: '^PASS_MIN_DAYS.*'
    line: 'PASS_MIN_DAYS {{ pwsec.pass_min_days }}'
    mode: 0644
    owner: root
    group: root

- name: Ensure login-notify script
  become: yes
  template:
    src: login-notify
    dest: /usr/local/bin/login-notify
    # it contains private token id, so close for others
    mode: 0750
    owner: root
    group: root
  when: pwsec.notify_on_login
  tags:
    - notify

- name: Ensure profiles for pam-auth-update
  become: yes
  template:
    src: "{{ item }}"
    dest: "/usr/share/pam-configs/{{ item }}"
    mode: 0644
    owner: root
    group: root
  with_items:
    - exec
    - pwhistory
    - pwquality

- name: Ensure pam configuration
  become: yes
  shell: pam-auth-update {%if item.value%}--enable{%else%}--remove{%endif%} {{item.key}} --force
  with_dict:
    exec: "{{ pwsec.notify_on_login }}"
    pwhistory: "{{ pwsec.password_reuse }}"
    pwquality: "{{ pwsec.password_strength }}"
  register: result
  retries: 5
  delay: 10
  until: result is not failed


- name: Create temporary dir for security scripts
  become: yes
  tempfile:
    prefix: ansible.sec
    state: directory
  register: sec_dir
  changed_when: false

- name: Copy script to check current users password expiration settings
  become: yes
  copy:
    src: check_users.sh
    dest: "{{ sec_dir.path }}/check_users.sh"
    mode: 0755
    owner: root
    group: root
  changed_when: False

- name: Run expiration check for existing users
  become: yes
  command: "{{ sec_dir.path }}/check_users.sh {{ pwsec.pass_max_days }} {{ pwsec.pass_warn_age }} '({{ pwsec.expiration_excluded_users | join('|') }})'"
  register: usercheck
  changed_when: usercheck.rc == 2
  failed_when: usercheck.rc != 0 and usercheck.rc != 2
  when: not pwsec_validation

- name: Run non-expiration check for existing users
  become: yes
  command: "{{ sec_dir.path }}/exclude_expiration.sh {{ item }}"
  with_items: "{{ pwsec.expiration_excluded_users }}"
  register: usercheck
  changed_when: usercheck.rc == 2
  failed_when: usercheck.rc not in [0, 2] in usercheck.stdout_lines
  when: not pwsec_validation
